import logging
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admin
import keyboard as kb
import functions as func
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled
from aiogram.utils.markdown import quote_html

import aiogram.utils.markdown as md
from aiogram.types import ParseMode
from aiogram.utils import executor

import  requests

import data
import datetime
import os
from pathlib import Path


from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.utils.callback_data import CallbackData

reg_callback = CallbackData("reg", "status", "chat_id", "nick", "name", "namee", "age", "age2")
storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()
admin_chat_id =-1001535411259
admin = admin_chat_id

class st(StatesGroup):
    item = State()
    item2 = State()
    item3 = State()
    item4 = State()
    item5 = State()

class Form(StatesGroup):
    name = State()  # –ë—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ '–§–æ—Ä–º–∞:–∏–º—è'
    age = State()  # –ë—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ "–§–æ—Ä–º–∞:–≤–æ–∑—Ä–∞—Å—Ç"
    gender1 = State()  # –ë—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ "–§–æ—Ä–º–∞:–ø–æ–ª"
    gender = State()
class Anketa(StatesGroup):
    # –≤–Ω—É—Ç—Ä–∏ –æ–±—ä—è–≤–ª—è–µ–º –°—Ç–µ–π—Ç—ã(—Å–æ—Å—Ç–æ—è–Ω–∏—è), –¥–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ü–µ–ø–æ—á–∫–µ —ç—Ç–∏—Ö —Å—Ç–µ–π—Ç–æ–≤
    name = State()
    namee = State()
    age = State()
    age2 = State()
def inline(chat_id, nick, name, age):
    confirm = InlineKeyboardButton(
        text="",
        callback_data=reg_callback.new(
            status="1", chat_id=chat_id, nick=nick, name=name, age=age
        ),
    )
    cancel = InlineKeyboardButton(
        text="",
        callback_data=reg_callback.new(
            status="0", chat_id=chat_id, nick="-", name="-", age="-"
        ),
    )
    conf_inline = InlineKeyboardMarkup()
    conf_inline.insert(confirm).insert(cancel)
    return conf_inline
    
    

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer('‚ùï–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –±–æ—Ç-—Å–∞–ø–ø–æ—Ä—Ç‚ùï\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n\n üëÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üëÄ\n\n  –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É.\n‚ùóÔ∏è–ù–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫–∏‚ùóÔ∏è',reply_markup=kb.start3)

@dp.message_handler(content_types=['text'], text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå')
async def cmd_start(message: types.Message):
    await message.answer('‚ùï–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –±–æ—Ç-—Å–∞–ø–ø–æ—Ä—Ç‚ùï\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n\n üëÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üëÄ\n\n  –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É.\n‚ùóÔ∏è–ù–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫–∏‚ùóÔ∏è',reply_markup=kb.start3)

@dp.message_handler(content_types=['text'], text='‚è≥ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ‚è≥')
async def cmd_start(message: types.Message):
    await message.answer('‚è≥–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã‚è≥\n\nüïó –° 8:00 –¥–æ 20:00 üïó\n‚ùóÔ∏è–ù–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫–∏‚ùóÔ∏è',reply_markup=kb.start3)

@dp.message_handler(content_types=['text'], text='üëÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üëÄ')
async def name(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:",reply_markup=kb.back1)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–µ–π—Ç
    await Anketa.name.set()


# –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ '*', –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state='*', content_types=['text'], text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå')
@dp.message_handler(Text(equals='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.finish()
    # –ò —Å–Ω–∏–º–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await message.reply('–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω–∏–ª', reply_markup=types.ReplyKeyboardRemove())
    await message.answer('‚ùï–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –±–æ—Ç-—Å–∞–ø–ø–æ—Ä—Ç‚ùï\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n\n üëÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É üëÄ\n\n  –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É.\n‚ùóÔ∏è–ù–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫–∏‚ùóÔ∏è',reply_markup=kb.start3)


@dp.message_handler(state=Anketa.name, content_types=types.ContentTypes.TEXT)
async def age(message: types.Message, state: FSMContext):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ storage
    await state.update_data(name=message.text)
    await bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π)",reply_markup=kb.back1
    )
    await Anketa.namee.set()

@dp.message_handler(state=Anketa.namee, content_types=types.ContentTypes.TEXT)
async def namee(message: types.Message, state: FSMContext):
    await state.update_data(namee=message.text)
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:",reply_markup=kb.back1)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–µ–π—Ç
    await Anketa.age.set()


@dp.message_handler(state=Anketa.age, content_types=types.ContentTypes.TEXT)
async def fun(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2 –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å callback –¥–∞–Ω–Ω—ã–º–∏
    await message.reply(
        f'<b>–ò–º—è:</b> {data.get("name")}\n'
        f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {data.get("namee")}\n'
        f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {data.get("age")}', parse_mode='HTML'
    )
    await bot.send_message(
        message.chat.id, "üëÜ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å‚ÅâÔ∏è",reply_markup=kb.start2
    )
    await Anketa.age2.set()

@dp.message_handler(content_types=['text'], text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ',state=Anketa.age2)
@dp.throttled(func.antiflood, rate=3)
async def fun(message: types.Message, state: FSMContext):
    await state.update_data(age2=message.text)
    data = await state.get_data()
    path = len([nomID for nomID in os.listdir('C:/Users/p.samoilov.SOVA/Desktop/SovTest/All_applications') if os.path.isfile(os.path.join('C:/Users/p.samoilov.SOVA/Desktop/SovTest/All_applications',nomID))])
    #print(path)
    #print(path+1)
    Namid = path+1
    NamID = str(Namid)
    my_file = open(f"C:/Users/p.samoilov.SOVA/Desktop/SovTest/All_applications/"+NamID+".txt", "w+",encoding='utf-8')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤ —Å –∞–Ω–∫–µ—Ç–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º 2 –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å callback –¥–∞–Ω–Ω—ã–º–∏
    await bot.send_message(
        admin,
        f"<b>!–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{NamID}\nID: </b>{message.chat.id}\n<b>–û—Ç:</b> @{message.from_user.username}   <a href='tg://user?id={message.from_user.id}'>{quote_html(message.from_user.full_name)}</a>\n"
        f'<b>–ò–º—è:</b> {data.get("name")}\n'
        f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {data.get("namee")}\n'
        f'<b>üñã–°–æ–æ–±—â–µ–Ω–∏–µüñã</b>\n {data.get("age")}',reply_markup=kb.fun(message.chat.id), parse_mode='HTML'
    )

    my_file.write(   
                f"<b>!–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{NamID}\nID: </b>{message.chat.id}\n<b>–û—Ç:</b> @{message.from_user.username}\n<a href='tg://user?id={message.from_user.id}'>{quote_html(message.from_user.full_name)}</a>\n"
                f'<b>–ò–º—è:</b> {data.get("name")}\n'
                f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>{data.get("namee")}\n'  
                f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>\n {data.get("age")}'
                )
    
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\nüåê –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ ‚Ññ"+NamID,reply_markup=kb.start3)
    # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º "–æ–ø—Ä–æ—Å" 
    my_file.close()

    dirName = f'C:/Users/p.samoilov.SOVA/Desktop/SovTest/{message.chat.id}'
    try:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        os.makedirs(dirName)
        await bot.send_message(
            admin,
            f"<b>‚ò†Ô∏è–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚ò†Ô∏è\nID: </b>{message.chat.id}\n<b>–õ–∏–Ω–∫:</b> @{message.from_user.username}   <a href='tg://user?id={message.from_user.id}'>{quote_html(message.from_user.full_name)}</a>\n", parse_mode='HTML'
            )
        print("–ü–∞–ø–∫–∞ " , dirName ,  " —Å–æ–∑–¥–∞–Ω–∞") 
    except FileExistsError:
        print("–ü–∞–ø–∫–∞ " , dirName ,  " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å")
    a=datetime.datetime.now().strftime('%d-%m-%Y_%H.%M-%S') 
    my_file = open(f"C:/Users/p.samoilov.SOVA/Desktop/SovTest/{message.chat.id}/"+a+".txt", "w+",encoding='utf-8')
    my_file.write(   
                f"<b>!–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{NamID}\nID: </b>{message.chat.id}\n<b>–û—Ç:</b> @{message.from_user.username}\n<a href='tg://user?id={message.from_user.id}'>{quote_html(message.from_user.full_name)}</a>\n"
                f'<b>–ò–º—è:</b> {data.get("name")}\n'
                f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>{data.get("namee")}\n'  
                f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ</b>\n {data.get("age")}'
                )
    my_file.close()
    await state.finish() 
@dp.callback_query_handler(lambda call: True) # Inline —á–∞—Å—Ç—å
async def cal(call, state: FSMContext):
	if 'ans' in call.data:
		a = call.data.index('-ans')
		ids = call.data[:a]
		await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', reply_markup=kb.back)
		await st.item2.set() # –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await state.update_data(uid=ids)
	elif 'ignor' in call.data:
		await call.answer('–£–¥–∞–ª–µ–Ω–æ')
		await bot.delete_message(call.message.chat.id, call.message.message_id)
		await state.finish()
        
@dp.message_handler(state=st.item2)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	else:
		await message.answer('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ö–¶.', reply_markup=kb.menu)
		data = await state.get_data()
		id = data.get("uid")
		await state.finish()
		await bot.send_message(id, '‚ö†Ô∏è–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚ùï–¢–µ–∫—Å—Ç: {}'.format(message.text))

@dp.message_handler(content_types=['text'], text='–ê–¥–º–∏–Ω–∫–∞')
async def handfler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.', reply_markup=kb.adm)

@dp.message_handler(content_types=['text'], text='–ù–∞–∑–∞–¥')
async def handledr(message: types.Message, state: FSMContext):
	await message.answer('üîê–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüîê', reply_markup=kb.menu)

@dp.message_handler(content_types=['text'], text='–ß–°')
async def handlaer(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			q.execute(f"SELECT * FROM users WHERE block == 1")
			result = q.fetchall()
			sl = []
			for index in result:
				i = index[0]
				sl.append(i)

			ids = '\n'.join(map(str, sl))
			await message.answer(f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ß–°:\n{ids}')


@dp.message_handler(content_types=['text'], text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°')
async def hanadler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('üñã –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.back)
			await st.item3.set()

@dp.message_handler(content_types=['text'], text='–£–±—Ä–∞—Ç—å –∏–∑ –ß–°')
async def hfandler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('üñã –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.back)
			await st.item4.set()

@dp.message_handler(content_types=['text'], text='‚ôªÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ ‚ôªÔ∏è')
async def hangdler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.back)
			await st.item.set()

@dp.callback_query_handler(lambda call: True) # Inline —á–∞—Å—Ç—å
async def cal(call, state: FSMContext):
	if 'ans' in call.data:
		a = call.data.index('-ans')
		ids = call.data[:a]
		await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', reply_markup=kb.back)
		await st.item2.set() # –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await state.update_data(uid=ids)
	elif 'ignor' in call.data:
		await call.answer('–£–¥–∞–ª–µ–Ω–æ')
		await bot.delete_message(call.message.chat.id, call.message.message_id)
		await state.finish()

@dp.message_handler(state=st.item2)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	else:
		await message.answer('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ö–¶.', reply_markup=kb.menu)
		data = await state.get_data()
		id = data.get("uid")
		await state.finish()
		await bot.send_message(id, '‚ö†Ô∏è–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚ùï–¢–µ–∫—Å—Ç: {}'.format(message.text))

@dp.message_handler(state=st.item)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	text = message.text
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		info = row
		await message.answer('üåê–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!', reply_markup=kb.adm)
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(text))
			except:
				pass
		await message.answer('‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=kb.adm)
		await state.finish()


@dp.message_handler(content_types=['text'], text='–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É')
async def hangdler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('üñã –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.back)
			await st.item5.set()


@dp.message_handler(state=st.item5)
async def process_name(message: types.Message, state: FSMContext):
    q.execute(f'SELECT user_id FROM users')
    row = q.fetchall()
    connection.commit()
    text = message.text
    Yesss = f'C:/Users/p.samoilov.SOVA/Desktop/SovTest/All_applications/'+str(text)+'.txt'
    try:
        # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        os.path.split(Yesss)
        with open('C:/Users/p.samoilov.SOVA/Desktop/SovTest/All_applications/'+str(text)+'.txt','r',encoding='utf-8') as f:
            homework = f.read()
        await message.answer('–ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ'+str(text)+':', reply_markup=kb.adm)
        await bot.send_message(message.chat.id, f'{str(homework)}', reply_markup=kb.fun(message.chat.id), parse_mode='HTML')
    except FileNotFoundError:
        await message.answer('–û—à–∏–±–∫–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!', reply_markup=kb.adm)

    await state.finish()
    

@dp.message_handler(state=st.item3)
async def proce(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer(' ‚ùóÔ∏è–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=kb.adm)
				await state.finish()
			else:
				a = result[0]
				id = a[0]
				if id == 0:
					q.execute(f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', reply_markup=kb.adm)
					await state.finish()
					await bot.send_message(message.text, '‚ÄºÔ∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.‚ÄºÔ∏è')
				else:
					await message.answer('‚ùóÔ∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.', reply_markup=kb.adm)
					await state.finish()
		else:
			await message.answer('–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã...\n–í–≤–µ–¥–∏ ID')

@dp.message_handler(state=st.item4)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.adm)
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.‚ÅâÔ∏è', reply_markup=kb.adm)
				await state.finish()
			else:
				a = result[0]
				id = a[0]
				if id == 1:
					q.execute(f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.', reply_markup=kb.adm)
					await state.finish()
					await bot.send_message(message.text, '‚úÖ–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
				else:
					await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.‚ôªÔ∏è', reply_markup=kb.adm)
					await state.finish()
		else:
			await message.answer('–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã...\n–í–≤–µ–¥–∏ ID')






if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)